// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3853.CompetitionRobot20160120;

import org.usfirst.frc3853.CompetitionRobot20160120.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton hometheArmButton1;
    public JoystickButton moveArmOut7;
    public JoystickButton moveArmIn6;
    public JoystickButton resetArmEncoder8;
    public Joystick joystick1;
    public JoystickButton shootBallButton1;
    public JoystickButton loadBallButton2;
    public JoystickButton armPortButton2;
    public JoystickButton armChevalButton3;
    public Joystick ballJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        ballJoystick = new Joystick(1);
        
        armChevalButton3 = new JoystickButton(ballJoystick, 4);
        armChevalButton3.whenPressed(new ChevalCommandGroup());
        armPortButton2 = new JoystickButton(ballJoystick, 3);
        armPortButton2.whenPressed(new PortcullisCommandGroup());
        loadBallButton2 = new JoystickButton(ballJoystick, 2);
        loadBallButton2.whileHeld(new LoadBall());
        shootBallButton1 = new JoystickButton(ballJoystick, 1);
        shootBallButton1.whileHeld(new ShootBall());
        joystick1 = new Joystick(0);
        
        resetArmEncoder8 = new JoystickButton(joystick1, 8);
        resetArmEncoder8.whenPressed(new ResetArmEncoder());
        moveArmIn6 = new JoystickButton(joystick1, 6);
        moveArmIn6.whileHeld(new MoveArmIn());
        moveArmOut7 = new JoystickButton(joystick1, 7);
        moveArmOut7.whileHeld(new MoveArmOut());
        hometheArmButton1 = new JoystickButton(joystick1, 1);
        hometheArmButton1.whenPressed(new HomeTheArm());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveTankTeleop", new DriveTankTeleop());
        SmartDashboard.putData("LiftAndClearPort", new LiftAndClearPort());
        SmartDashboard.putData("LoadBall", new LoadBall());
        SmartDashboard.putData("LowerAndClearCheval", new LowerAndClearCheval());
        SmartDashboard.putData("ReadyArmForCheval", new ReadyArmForCheval());
        SmartDashboard.putData("ReadyForPort", new ReadyForPort());
        SmartDashboard.putData("ReleaseBall", new ReleaseBall());
        SmartDashboard.putData("ShootBall", new ShootBall());
        SmartDashboard.putData("VerticalArm", new VerticalArm());
        SmartDashboard.putData("ChevalCommandGroup", new ChevalCommandGroup());
        SmartDashboard.putData("PortcullisCommandGroup", new PortcullisCommandGroup());
        SmartDashboard.putData("Command Group 1", new CommandGroup1());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }

    public Joystick getBallJoystick() {
        return ballJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

